'\" t
'\" The line above instructs most `man' programs to invoke tbl
'\"
'\" Separate paragraphs; not the same as PP which resets indent level.
.de SP
.if t .sp .5
.if n .sp
..
'\"
'\" Replacement em-dash for nroff (default is too short).
.ie n .ds m " - 
.el .ds m \(em
'\"
'\" Placeholder macro for if longer nroff arrow is needed.
.ds RA \(->
'\"
'\" Decimal point set slightly raised
.ds d \v'-.15m'.\v'+.15m'
'\"
.TH SoX 1 "January 31, 2007" "sox" "Sound eXchange"
.SH NAME
SoX\*mSound eXchange\*mThe Swiss Army knife of audio manipulation
.SH SYNOPSIS
.nf
\fBsox\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIinfile1\fR
    [[\fIformat-options\fR] \fIinfile2\fR] ... [\fIformat-options\fR] \fIoutfile\fR
    [\fIeffect\fR [\fIeffect-options\fR]] ...
.SP
\fBplay\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIinfile1\fR
    [[\fIformat-options\fR] \fIinfile2\fR] ... [\fIformat-options\fR]
    [\fIeffect\fR [\fIeffect-options\fR]] ...
.SP
\fBrec\fR [\fIglobal-options\fR] [\fIformat-options\fR] \fIoutfile\fR
    [\fIeffect\fR [\fIeffect-options\fR]] ...
.fi
.SH DESCRIPTION
SoX reads and writes audio files in most popular formats and can
optionally apply effects to them; it includes a basic audio synthesiser,
and, on many systems, can play and record audio files.
.SP
SoX can also combine multiple input files (with the same sample rate and
number of channels) to form one output file using one of three methods:
`concatenate' (the default), `mix', or `merge'.
.SP
If invoked as `play', the output file is the default sound device. If
invoked as `rec', the input device is the default sound device.
.SP
The overall SoX processing chain can be summarised as follows:
.SP
.ce
Input(s) \*(RA Combiner \*(RA Effects \*(RA Output
.SP
To get the most from SoX, it pays to be aware of some of the intricacies
of audio file formats and of audio processing; so it best to read this
manual through before using SoX for the first time; however, readers who
are eager to see SoX in action right-away might want to start at the
.B Examples
section.
.SS File Formats
There are two types of audio file format that SoX can work with.  The
first is `self-describing'; these formats include a header that
completely describes the characteristics of the audio data that follows.
The second type is `headerless' (or `raw data'); here,
the audio data characteristics must be described using the
SoX command line.
.SP
The following four characteristics are sufficient to describe
the format of audio data so that it can be processed with SoX:
.TP
sample rate
The sample rate in samples per second (`Hertz' or `Hz').  For
example, digital telephony traditionally uses a sample rate of 8000Hz
(8kHz); audio Compact Discs use 44100Hz (44\*d1kHz).
.TP
sample size
The number of bits used to store each sample. Most popular are 8-bit
(one byte) and 16-bit (two bytes). (Since many now-common sound
formats were invented when most computers used a 16-bit word, two
bytes is often called a `word', but since current personal computers
overwhelmingly have 32-bit or 64-bit words, this usage is confusing,
and is not used in the SoX documentation.)
.TP
data encoding
The way in which each audio sample is represented (or `encoded').  Some
encodings have variants with different byte-orderings or bit-orderings;
some `compress' the audio data, i.e. the stored audio data takes up less
space (i.e. disk-space or transmission band-width) than the other format
parameters and the number of samples would imply.  Commonly-used
encoding types include floating-point, \(*m-law, ADPCM, signed linear,
and FLAC.
.TP
channels
The number of audio channels contained in the file.  One (`mono') and two
(`stereo') are widely used.
.PP
The term `bit-rate' is sometimes used as an overall measure of an audio
format and may incorporate elements of all of the above.
.SP
Most self-describing formats also allow textual `comments' to be
embedded in the file that can be used to describe the audio in some way,
e.g. for music, the title, the author, etc.
.SS Determining & Setting The File Format
There are several mechanisms available for SoX to use to determine or set the
format characteristics of an audio file.  Depending on the circumstances,
individual characteristics may be determined or set using different mechanisms.
.SP
To determine the format of an input file, SoX will use, in order of
precedence and as given or available:
.SP
.TS
tab (@);
l l l.
@1.@Command-line format options.
@2.@The contents of the file header.
@3.@The filename extension.
.TE
.SP
To set the output file format, SoX will use, in order of
precedence and as given or available:
.SP
.TS
tab (@);
l l lw(6i).
@1.@Command-line format options.
@2.@The filename extension.
@3.@T{
The input file format characteristics, or the closest
to them that is supported by the output file type.
T}
.TE
.SP
For all files, SoX will exit with an error
if the file type cannot be determined; command-line format options may
need to be added or changed to resolve the problem.
.SS Accuracy
Many file formats that compress audio discard some of the audio signal
information whilst doing so; converting to such a format then converting
back again will not produce an exact copy of the original audio.  This
is the case for many formats used in telephony (e.g.  A-law, GSM) where
low signal bandwidth is more important than high audio fidelity, and for
many formats used in portable music players (e.g. MP3, Vorbis) where
adequate fidelity can be retained even with the large compression ratios
that are needed to make portable players practical.
.SP
Formats that discard audio signal information are called `lossy',
and formats that do not, `lossless'.  The term `quality' is used as a
measure of how closely the original audio signal can be reproduced when
using a lossy format.
.SP
Audio file conversion with SoX is lossless when it can be, i.e. when not
using lossy compression, when not reducing the sampling rate or number
of channels, and when the number of bits used in the destination format
is not less than in the source format.  E.g.  converting from an 8-bit
PCM format to a 16-bit PCM format is lossless but converting from an
8-bit PCM format to (8-bit) A-law isn't.
.SP
.B N.B.
SoX converts all audio files to an internal uncompressed
format before performing any audio processing; this means that
manipulating a file that is stored in a lossy format can cause further
losses in audio fidelity.  E.g. with
.SP
	sox long.mp3 short.mp3 trim 10
.SP
SoX first decompresses the input MP3 file, then applies the
.B trim
effect, and finally creates the output MP3 file by recompressing the
audio\*mwith a possible reduction in fidelity above that which
occurred when the input file was created.
Hence, if what is ultimately desired is lossily compressed audio, it is
highly recommended to perform all audio processing using lossless file
formats and then convert to the lossy format at the final stage.
.SP
.B N.B.
Applying multiple effects with a single SoX invocation will,
in general, produce more accurate results than those produced using
multiple SoX invocations; hence this is also recommended.
.SS Clipping
Clipping is distortion that occurs when an audio signal
level (or `volume') exceeds the range of the chosen representation.
It is nearly always undesirable and so should usually be corrected by
adjusting the volume prior to the point at which clipping occurs.
.SP
In SoX, clipping could occur, as you might expect, when using the
.B vol
effect to increase the audio volume, but could also occur with many
other effects, when converting one format to another, and even when
simply playing the audio.
.SP
Playing an audio file often involves re-sampling, and processing by
analogue components that can introduce a small DC offset and/or
amplification, all of which can produce distortion if the audio signal
level was initially too close to the clipping point.
.SP
For these reasons, it is usual to make sure that an audio
file's signal level does not exceed around 70% of the maximum (linear)
range available, as this will avoid the majority of clipping problems.
SoX's
.B stat
effect can assist in determining the signal level in an audio file; the
.B vol
effect can be used to prevent clipping, e.g.
.SP
	sox dull.au bright.au vol \-6 dB treble +6
.SP
guarantees that the treble boost will not clip.
.SP
If clipping occurs at any point during processing, then
SoX will display a warning message to that effect.
.SS Input File Balancing
When multiple input files are given, SoX applies any specified effects
(including, for example, the
.B vol
volume adjustment effect) after the audio has been combined; however, it
is often useful to be able to set the volume of (i.e. `balance') the
inputs individually, before combining takes place.
.SP
For all SoX combining methods (`concatenate', `mix', or `merge'), input
file volume adjustments can be made manually using the
.B \-v
option (below) which can be given for one or more input files; if it is
given for only some of the input files then the others receive no volume
adjustment.  See the next section for a description of the automatic volume
adjustments that can apply when mixing input files.
.SP
The \fB\-V\fR option (below) can be used to show the input file volume
adjustments that have been selected (either manually or automatically).
.SS Input File Mixing
There are some special considerations that need to made when mixing
input files:
.SP
Unlike `concatenate' and `merge', the `mix' combining method has the
potential to cause clipping in the combiner if no balancing is
performed.  So for `mix', if manual volume adjustments are not given, to
ensure that clipping does not occur, SoX will automatically adjust the
volume (amplitude) of each input signal by a factor of \(S1/\s-2n\s+2,
where n is the number of input files.  If this results in audio that is
too quiet or otherwise unbalanced then the input file volumes should be
set manually as described above.
.SP
If mixed audio seems loud enough at some points through the audio but
too quiet in others, then dynamic-range compression should be applied to
correct this\*msee the
.B compand
effect.
.SS Examples
The simple command:
.SP
	sox recital.au recital.wav
.SP
translates an audio file in Sun .au format
to a Microsoft WAV file, whilst:
.SP
	sox recital.au \-r 12000 \-b \-c 1 recital.wav vol 0\*d7 dither
.SP
performs the same format translation, but also
changes the sampling rate to 12000Hz,
the sample size to one byte (8 bits),
the number of channels to one (mono),
and applies the \fBvol\fR and \fBdither\fR effects
to the audio.
.SP
Furthermore:
.SP
	sox \-r 8000 \-u \-b \-c 1 voice-memo.raw voice-memo.wav
.SP
adds a header to a raw audio file,
.SP
	sox slow.aiff fixed.aiff speed 1\*d027 rabbit -c0
.SP
adjusts audio speed using the most accurate
.B rabbit
algorithm,
.SP
	sox short.au long.au longer.au
.SP
concatenates two audio files, and
.SP
	sox \-m music.mp3 voice.wav mixed.flac
.SP
mixes together two audio files.
.SP
	play \(dq01 \- The Power Of Love.ogg\(dq bass +3
.SP
plays an audio file (through the default sound device) whilst applying a
bass boosting effect,
.SP
	play \-c 4 \-n \-c 1 synth sin %\-12 sin %\-9 sin %\-5 sin %\-2 vol 0\*d7 avg fade q 0\*d1 1 0\*d1
.SP
plays a synthesised `A minor seventh' chord with a pipe-organ sound,
.SP
	rec test.aiff trim 0 10
.SP
records 10 seconds of audio using default parameters, and
.SP
	rec \-c 2 take1.aiff
.SP
starts a stereo recording that will finish when the interrupt key (often
Ctrl-C) is pressed.
.SP
Other examples can found thoughout this manual and in the
separate
.BR soxexam (7)
manual.
.SH FILENAMES
The following may be used in certain circumstances in place of a normal
filename on the command line:
.TP
\fB\-\fR
SoX can be used in pipeline operations by using the special
filename `\-' which,
if used in place of an input filename, will cause
SoX will read audio data from `standard input' (stdin),
and which,
if used in place of the output filename, will cause
SoX will send audio data to `standard output' (stdout).
Note that when using this option, the file-type (see
.B \-t
below) must also be given.
.TP
\fB\-n\fR
This can be used in place of an input or output filename
to specify that a `null' file is to be used.
.SP
Using a null file to input audio is equivalent to
using a normal audio file that contains an infinite amount
of silence, and as such is not generally useful unless used
with an effect that specifies a finite time length
(such as \fBtrim\fR or \fBsynth\fR).
.SP
Using a null file to output audio amounts to discarding the audio
and is useful mainly with effects that produce information about the
audio instead of affecting it (such as \fBnoiseprof\fR or \fBstat\fR).
.SP
The number of channels and the sampling rate associated with a null file
are by default 2 and 44\*d1kHz respectively, but these can be overridden
if necessary by using appropriate command-line format options.
.SP
One other use of \fB\-n\fR is to use it in conjunction with
.B \-V
to display information from the audio file header
without having to read any further into the file, e.g.
.B sox \-V *.wav \-n
will display header information for each `WAV' file in the current
directory.
.TP
\fB\-e\fR
This is an alias of
.B \-n
and is retained for backwards compatibility only.
.PP
.B N.B.
Giving SoX an input or output filename that is the same as a SoX
effect-name will not work since SoX will treat it as an effect
specification.  The only work-around to this is to avoid such
filenames; however, this is generally not difficult since most audio
filenames have a filename `extension', whilst effect-names do not.
.SH OPTIONS
.SS Global Options
These options can be specified on the command line at any point
before the first effect name.
.TP
\fB\-h\fR, \fB\-\-help\fR
Show version number and usage information.
.TP
\fB\-\-help\-effect=\fIname\fR
Show usage information on the specified effect.  The name
\fBall\fR can be used to show usage on all effects.
.TP
\fB\-\-interactive\fR
Prompt before overwriting an existing file with the same name as that
given for the output file.
.TP
\fB\-m\fR, \fB\-\-mix\fR
Set the input file combining method to `mix'.
Two or more input files must be given,
and will be mixed together (instead of concatenated)
to form the output file.
A mixed audio file cannot be un-mixed.
.SP
See also \fBInput File Mixing\fR above.
.TP
\fB\-M\fR, \fB\-\-merge\fR
Set the input file combining method to `merge'.
Two or more input files must be given,
and will be merged together (instead of concatenated)
to form the output file.
A merged audio file comprises all of the channels from all of the input
files; a merged file could be un-merged using the
.B pick
effect.
.SP
For example, two mono files could be merged to form one
stereo file; the first and second mono files would become
the left and right channels of the stereo file.
.TP
\fB\-\-octave\fR
Run in a mode that can be used, in conjunction with the GNU
Octave program, to assist with the selection and configuration
of many of the filtering effects.  For the first given effect
that supports the \fB\-\-octave\fR option, SoX will output Octave
commands to plot the effect's transfer function, and then exit
without actually processing any audio.  E.g.
.SP
	sox \-\-octave input-file \-n highpass 1320 > plot.m
.br
	octave plot.m
.TP
\fB\-q\fR, \fB\-\-no\-show\-progress\fR
Run in quiet mode when SoX wouldn't otherwise do so;
this is the converse of the \fB\-S\fR option.
.TP
\fB\-S\fR, \fB\-\-show\-progress\fR
Display input file format/header information and input file(s)
processing progress in terms of elapsed/remaining time and percentage.
This option is enabled by default when using
SoX to play or record audio.
.TP
\fB\-\-version\fR
Show version number and exit.
.IP \fB\-V\fB[\fIlevel\fB]\fP
Set verbosity.
SoX prints messages to the console (stderr) according to the following
verbosity levels:
.IP
.RS
.IP 0
No messages are printed at all; use the exit status to determine
if an error has occurred.
.IP 1
Only error messages are printed.  These are generated if
SoX cannot complete the requested commands.
.IP 2
Warning messages are also printed.  These are generated if
SoX can complete the requested commands,
but not exactly according to the requested command parameters,
or if clipping occurs.
.IP 3
Descriptions of
SoX's processing phases are also printed.
Useful for figuring out exactly how
SoX is mangling your audio.
.IP "4 and above"
Messages to help with debugging
SoX are also printed.
.RE
.IP
By default, the verbosity level is set to 2.  Each occurrence of the \fB\-V\fR
option increases the verbosity level by 1.  Alternatively, the verbosity
level can be set to an absolute number by specifying it immediately after
the
.B \-V
e.g.
.B \-V0
sets it to 0.
.IP
.SS Input File Options
These options apply only to input files and may precede only input
filenames on the command line.
.TP
\fB\-v \fIvolume\fR, \fB\-\-volume=\fIvolume\fR
Adjust volume by a factor of \fIvolume\fR.
This is a linear (amplitude) adjustment, so a number less than 1
decreases the volume; greater than 1 increases it.  If a negative number
is given, then in addition to the volume adjustment, the audio signal
will be inverted.
.SP
See also the \fBstat\fR effect for information on how to find
the maximum volume of an audio file; this can be used to help select
suitable values for this option.
.SP
See also \fBInput File Balancing\fR above.
.SS Input & Output File Format Options
These options apply to the input or output file whose name they
immediately precede on the command line and are used mainly when
working with headerless file formats or when specifying a format
for the output file that is different to that of the input file.
.TP
\fB\-c \fIchannels\fR, \fB\-\-channels=\fIchannels\fR
The number of audio channels in the audio file.
This may be 1, 2, or 4; for mono, stereo, or quad audio.  To cause
the output file to have a different number of channels than the input
file, include this option with the output file options.
If the input and output file have a different number of channels then the
.B avg
effect must be used.  If the
.B avg
effect is not specified on the
command line it will be invoked internally with default parameters.
.TP
\fB\-\-comment \fItext\fR
Specify the comment text to store in the output file header (where
applicable).
.SP
SoX will provide a default comment if this option (or
.BR \-\-comment\-file )
is not given; to specify that no comment should be stored in the output file,
use 
.BR "\-\-comment \(dq\(dq" .
.TP
\fB\-\-comment\-file \fIfilename\fR
Specify a file containing the comment text to store in the output
file header (where applicable).
.TP
\fB\-\-lua\-script \fIfilename\fR
Specify the Lua script to use for a `lua' format. See
.BR soxlua (7)
for details.
.TP
\fB\-r \fIrate\fR, \fB\-\-rate=\fIrate\fR
Gives the sample rate in Hz of the file.  To cause the output file to have
a different sample rate than the input file, include this option with
the output file format options.
.SP
If the input and output files have
different rates then a sample rate change effect must be run.  Since
SoX has
multiple rate changing effects, the user can specify which to use as an effect.
If no rate change effect is specified then a default one will be chosen.
.TP
\fB\-t \fIfile-type\fR, \fB\-\-type=\fIfile-type\fR
Gives the type of the audio file.  This is useful when the
file extension is non-standard or when the type can not be determined by
looking at the header of the file.
.SP
The \fB\-t\fR option can also be used to override the type implied by
an input filename extension, but if overriding with a type that has a
header, SoX will exit with an appropriate error message if such a
header is not actually present.
.SP
See \fBFILE TYPES\fR below for a list of supported file types.
.PP
\fB\-L\fR, \fB\-\-endian=little\fR
.br
\fB\-B\fR, \fB\-\-endian=big\fR
.br
\fB\-x\fR, \fB\-\-endian=swap\fR
.if t .sp -.5
.if n .sp -1
.TP
\ 
These options specify whether the byte-order of the audio data is,
respectively, `little endian', `big endian', or the opposite to that of
the system on which SoX is being used.  Endianness applies only to data
encoded as signed or unsigned integers of 16 or more bits.  It is often
necessary to specify one of these options for headerless files, and
sometimes necessary for (otherwise) self-describing files.  A given
endian-setting option may be ignored for an input file whose header
contains a specific endianness identifier, or for an output file that
is actually an audio device.
.SP
.B N.B.
Unlike normal format characteristics, the endianness (byte, nibble, &
bit ordering) of the input file is not automatically used for the output
file; so, for example, when the following is run on a little-endian system:
.SP
	sox -B audio.uw trimmed.uw trim 2
.SP
trimmed.uw will be created as little-endian;
.SP
	sox -B audio.uw -B trimmed.uw trim 2
.SP
must be used to preserve big-endianness in the output file.
.SP
The
.B -V
option can be used to check the selected orderings.
.TP
\fB\-N\fR, \fB\-\-reverse\-nibbles\fR
Specifies that the nibble ordering (i.e. the 2 halves of a byte) of the samples should be reversed;
sometimes useful with ADPCM-based formats.
.SP
.B N.B.
See also N.B. in section on
.B -x
above.
.TP
\fB\-X\fR, \fB\-\-reverse\-bits\fR
Specifies that the bit ordering of the samples should be reversed;
sometimes useful with a few (mostly headerless) formats.
.SP
.B N.B.
See also N.B. in section on
.B -x
above.
.TP
\fB\-s\fR\^/\fB\-u\fR\^/\fB\-U\fR\^/\fB\-A\fR\^/\fB\-a\fR\^/\fB\-i\fR\^/\fB\-g\fR\^/\fB\-f\fR
The audio data encoding is signed linear (2's complement),
unsigned linear, \(*m-law (logarithmic), A-law (logarithmic),
ADPCM, IMA-ADPCM, GSM, or floating-point.
.SP
\(*m-law (or mu-law) and A-law are the U.S. and
international standards for logarithmic telephone audio compression.
When uncompressed \(*m-law has roughly the precision of 14-bit PCM audio
and A-law has roughly the precision of 13-bit PCM audio.
.SP
A-law and \(*m-law are sometimes encoded using reversed bit-ordering
(i.e. MSB becomes LSB).  Internally, SoX understands how to work with
these encodings but there is currently no command line option to
specify them.  If you need this support then you can use the pseudo
file types of `.la' and `.lu' to inform SoX of the encoding.  See
supported file types for more information.
.SP
ADPCM is a form of audio compression that has a good
compromise between good audio quality and fast encoding/decoding
time.  It is used for telephone audio compression and places were
full fidelity is not as important.  When uncompressed it has roughly
the precision of 16-bit PCM audio.  Popular version of ADPCM include
G.726, MS ADPCM, and IMA ADPCM.  The \fB\-a\fR flag has different meanings
in different file handlers.  In \fB.wav\fR files it represents MS ADPCM
files, in all others it means G.726 ADPCM.
IMA ADPCM is a specific form of ADPCM compression, slightly simpler
and slightly lower fidelity than Microsoft's flavor of ADPCM.
IMA ADPCM is also called DVI ADPCM.
.SP
GSM is currently used for the vast majority of the world's digital
wireless telephone calls.  It utilises several audio
formats with different bit-rates and associated speech quality.
SoX has support for GSM's original 13kbps `Full Rate' audio format.
It is usually CPU intensive to work with GSM audio.
.TP
\fB\-1\fR\^/\fB\-2\fR\^/\fB\-3\fR\^/\fB\-4\fR\^/\fB\-8\fR
The sample datum size is 1, 2, 3, 4, or 8 bytes; i.e. 8, 16, 24, 32, or 64 bits.
.TP
The flags
\fB\-b\fR\^/\fB\-w\fR\^/\fB\-l\fR\^/\fB\-d\fR
which are respectively aliases for
\fB\-1\fR\^/\fB\-2\fR\^/\fB\-4\fR\^/\fB\-8\fR,
and abbreviate byte, word, long word, double long (long long) word,
are retained for backwards compatibility only.
.SS Output File Format Options
These options apply only to the output file and may precede only the output
filename on the command line.
.TP
\fB\-C \fIcompression-factor\fR, \fB\-\-compression=\fIcompression-factor\fR
The compression factor for variably compressing output file formats.  If
this option is not given, then a default compression factor will apply.
The compression factor is interpreted differently for different
compressing file formats.  See the description of the file formats that
use this option for more information.
.SH FILE TYPES
File types can be set by the filename extension or the
.B -t
option (see above). File types that can be determined
by a filename extension are listed with their names preceded by a dot.
.SP
.TP
.B .8svx
Amiga 8SVX musical instrument description format.
.TP
\&\fB.aiff\fR, \fB.aif\fR
AIFF files used on Apple IIc/IIgs and SGI.
Note: the AIFF format supports only one SSND chunk.
It does not support multiple audio chunks,
or the 8SVX musical instrument description format.
AIFF files are multimedia archives and
can have multiple audio and picture chunks.
You may need a separate archiver to work with them.
.TP
\&\fB.aiffc\fR, \fB.aifc\fR
AIFF-C (not compressed, linear), defined in DAVIC 1.4 Part 9 Annex B.
This format is referred from ARIB STD-B24, which is specified for
Japanese data broadcasting.  Any private chunks are not supported.
.SP
Note: The input file is currently processed as .aiff.
.TP
.B alsa
ALSA default device driver.
This is a pseudo-file type and can be optionally compiled into SoX.  Run
.B sox \-h
to see if you have support for this file type.  When this driver is used
it allows you to open up the ALSA /dev/snd/pcmCxDxp file and configure it to
use the same data format as passed in to SoX.
It works for both playing and recording audio files.  When playing audio
files it attempts to set up the ALSA driver to use the same format as the
input file.  It is suggested to always override the output values to use
the highest quality format your ALSA system can handle.  Example:
.B sox infile \-t alsa default
.TP
\&\fB.au\fR, \fB.snd\fR
Sun Microsystems AU files.
There are many types of AU file;
DEC has invented its own with a different magic number
and byte order.
SoX can read these files but will not write them.
Some .au files are known to have invalid AU headers; these
are probably original Sun \(*m-law 8000Hz files and
can be dealt with using the
.B .ul
format (see below).
.SP
It is possible to override AU file header information
with the
.B \-r
and
.B \-c
options, in which case SoX will issue a warning to that effect.
.TP
.B .avr
Audio Visual Research.
The AVR format is produced by a number of commercial packages
on the Mac.
.TP
\&\fB.cdda\fR, \fB.cdr\fR
`Red Book' Compact Disc Digital Audio.
CDDA has two audio channels formatted as 16-bit
signed integers at a sample rate of 44\*d1kHz.  The number of (stereo)
samples in each CDDA track is always a multiple of 588 which is why it
needs its own handler.
.TP
\&\fB.cvsd\fR, \fB.cvs\fR
Continuously Variable Slope Delta modulation.
A headerless format used to compress speech audio for applications such as voice mail.
This format is sometimes used with bit-reversed samples\*ethe
.B -X
format option can be used to set the bit-order.
.TP
.B .dat
Text Data files.
These files contain a textual representation of the
sample data.  There is one line at the beginning
that contains the sample rate.  Subsequent lines
contain two numeric data items: the time since
the beginning of the first sample and the sample value.
Values are normalized so that the maximum and minimum
are 1 and \-1.  This file format can be used to
create data files for external programs such as
FFT analysers or graph routines.  SoX can also convert
a file in this format back into one of the other file
formats.
.TP
\&\fB.dvms\fR, \fB.vms\fR
.\" FIXME: Need more info.
Used to compress speech audio for applications such as voice mail.
A self-describing variant of
.BR cvsd .
.TP
.B .flac
Free Lossless Audio CODEC compressed audio.
FLAC is an open, patent-free CODEC designed for compressing
music.  It is similar to MP3 and Ogg Vorbis, but lossless,
meaning that audio is compressed in FLAC without any loss in
quality.
.SP
SoX can decode native FLAC files (.flac) but not Ogg FLAC files (.ogg).
[But see
.B .ogg
below for information relating to support for Ogg
Vorbis files.]
.SP
SoX has basic support for writing FLAC files: it can encode to
native FLAC using compression levels 0 to 8.  8 is the default
compression level and gives the best (but slowest) compression;
0 gives the least (but fastest) compression.  The compression
level can be selected using the
.B \-C
option (see above) with a whole number from 0 to 8.
.SP
Note that Replay Gain information is not used by
SoX if present in FLAC input files and is not generated by
SoX for FLAC output files, however
SoX will copy input file `comments' (which can be used to hold Replay Gain
information) to output files that support comments, so FLAC output files
may contain Replay Gain information if some was present in the input
file.  In this case the Replay Gain information in the output file is
likely to be incorrect and so should be recalculated using a tool that
supports this (not SoX).
.SP
FLAC support in
SoX is optional and requires optional FLAC libraries.  To
see if there is support for FLAC run \fBsox \-h\fR and look for
it under the list of supported file formats as `flac'.
.TP
.B .fssd
An alias for the
.B .ub
format.
.TP
.B .gsm
GSM 06.10 Lossy Speech Compression.
A lossy format for compressing speech which is used in the
Global Standard for Mobile telecommunications (GSM).  It's good
for its purpose, shrinking audio data size, but it will introduce
lots of noise when a given audio signal is encoded and decoded
multiple times.  This format is used by some voice mail applications.
It is rather CPU intensive.
.SP
GSM in
SoX is optional and requires access to an external GSM library.  To see
if there is support for GSM run \fBsox \-h\fR
and look for it under the list of supported file formats.
.TP
.B .hcom
Macintosh HCOM files.
These are (apparently) Mac FSSD files with some variant
of Huffman compression.
The Macintosh has wacky file formats and this format
handler apparently doesn't handle all the ones it should.
Mac users will need their usual arsenal of file converters
to deal with an HCOM file on other systems.
.TP
.B .ima
A headerless file of IMA ADPCM audio data. IMA ADPCM claims 16-bit precision
packed into only 4 bits, but in fact sounds no better than
.BR .vox .
.TP
.B .lua
A pseudo-format which allows formats to be implemented in Lua. See
.BR soxlua (7)
for details.
.TP
.B .maud
An IFF-conforming audio file type, registered by
MS MacroSystem Computer GmbH, published along
with the `Toccata' sound-card on the Amiga.
Allows 8bit linear, 16bit linear, A-Law, \(*m-law
in mono and stereo.
.TP
\&\fB.mp3\fR, \fB.mp2\fR
MP3 compressed audio.  MP3 (MPEG Layer 3) is part of the
MPEG standards for audio and video compression.  It is a lossy
compression format that achieves good compression rates with little
quality loss.  See also
.B Ogg Vorbis
for a similar format.
.SP
MP3 support in
SoX is optional and requires access to either or both the external
libmad and libmp3lame libraries.  To
see if there is support for Mp3 run \fBsox \-h\fR
and look for it under the list of supported file formats as `mp3'.
.SP
.TP
\&\fB.ogg\fR, \fB.vorbis\fR
Ogg Vorbis compressed audio.
Ogg Vorbis is a open, patent-free CODEC designed for compressing music
and streaming audio.  It is a lossy compression format (similar to MP3,
VQF & AAC) that achieves good compression rates with a minimum amount of
quality loss.  See also
.B MP3
for a similar format.
.SP
SoX can decode all types of Ogg Vorbis files, and can encode at different
compression levels/qualities given as a number from \-1 (highest
compression/lowest quality) to 10 (lowest compression, highest quality).
By default the encoding quality level is 3 (which gives an encoded rate
of approx. 112kbps), but this can be changed using the
.B \-C
option (see above) with a number from \-1 to 10; fractional numbers (e.g.
3\*d6) are also allowed.
.SP
Decoding is somewhat CPU intensive and encoding is very CPU intensive.
.SP
Ogg Vorbis in
SoX is optional and requires access to external Ogg Vorbis libraries.  To
see if there is support for Ogg Vorbis run \fBsox \-h\fR
and look for it under the list of supported file formats as `vorbis'.
.TP
.B ossdsp
OSS /dev/dsp device driver.
This is a pseudo-file that can be optionally compiled into SoX.  Run
.B sox \-h
to see if it is supported. When this driver is used it allows you to
open play and record sounds on supported systems. When playing audio
files it attempts to set up the OSS driver to use the same format as
the input file. It is suggested to always override the output values
to use the highest quality format your OSS system can handle. Example:
.B sox infile \-t ossdsp \-w \-s /dev/dsp
.TP
.B .prc
Psion Record. Used in some Psion devices for System alarms and
recordings made by the built-in Record application. This format is
newer then the .wve format that is also used in some Psion devices.
.TP
.B .sf
IRCAM SDIF (Institut de Recherche et Coordination Acoustique/Musique
Sound Description Interchange Format). Used by academic music software
such as the CSound package, and the MixView sound sample editor.
.TP
.B .sph
SPHERE (SPeech HEader Resources) is a file format defined by NIST
(National Institute of Standards and Technology) and is used with
speech audio.  SoX can read these files when they contain
\(*m-law and PCM data.  It will ignore any header information that
says the data is compressed using \fIshorten\fR compression and
will treat the data as either \(*m-law or PCM.  This will allow SoX
and the command line \fIshorten\fR program to be run together using
pipes to encompasses the data and then pass the result to SoX for processing.
.TP
.B .smp
Turtle Beach SampleVision files.
SMP files are for use with the PC-DOS package SampleVision by Turtle Beach
Softworks.  This package is for communication to several MIDI samplers.  All
sample rates are supported by the package, although not all are supported by
the samplers themselves.  Currently loop points are ignored.
.TP
.B .snd
See
.B .au
format.
.TP
.B .sndt
SoundTool files. This is an older DOS file format.
.TP
.B .sou
An alias for the
.B .ub
format.
.TP
.B sunau
Sun /dev/audio device driver.
This is a pseudo-file type and can be optionally compiled into SoX.  Run
.B sox \-h
to see if you have support for this file type.  When this driver is used
it allows you to open up a Sun /dev/audio file and configure it to
use the same data type as passed in to SoX.
It works for both playing and recording audio files.  When playing audio
files it attempts to set up the audio driver to use the same format as the
input file.  It is suggested to always override the output values to use
the highest quality format your hardware can handle.  Example:
.B sox infile \-t sunau \-w \-s /dev/audio
or
.B sox infile \-t sunau \-U \-c 1 /dev/audio
for older sun equipment.
.TP
.B .txw
Yamaha TX-16W sampler.
A file format from a Yamaha sampling keyboard which wrote IBM-PC
format 3\*d5\(dq floppies.  Handles reading of files which do not have
the sample rate field set to one of the expected by looking at some
other bytes in the attack/loop length fields, and defaulting to
33kHz if the sample rate is still unknown.
.TP
.B .vms
See
.B .dvms
format.
.TP
.B .voc
Sound Blaster VOC files.
VOC files are multi-part and contain silence parts, looping, and
different sample rates for different chunks.
On input, the silence parts are filled out, loops are rejected,
and sample data with a new sample rate is rejected.
Silence with a different sample rate is generated appropriately.
On output, silence is not detected, nor are impossible sample rates.
Note, this version now supports playing VOC files with multiple
blocks and supports playing files containing \(*m-law and A-law samples.
.TP
.B .vorbis
See
.B .ogg
format.
.TP
.B .vox
A headerless file of Dialogic/OKI ADPCM audio data commonly comes with the
extension .vox.  This ADPCM data has 12-bit precision packed into only 4-bits.
.TP
.B .wav
Microsoft .WAV RIFF files.
This is the native audio file format of Windows, and widely used for uncompressed audio.
.SP
Normally \fB.wav\fR files have all formatting information
in their headers, and so do not need any format options
specified for an input file.  If any are, they will
override the file header, and you will be warned to this effect.
You had better know what you are doing! Output format
options will cause a format conversion, and the \fB.wav\fR
will written appropriately.
.SP
SoX currently can read PCM, \(*m-law, A-law, MS ADPCM, and IMA (or DVI) ADPCM.
It can write all of these formats including the ADPCM encoding.
Big endian versions of RIFF files, called RIFX, can also be read
and written.  To write a RIFX file, use the
.B \-B
option with the output file options.
.TP
.B .wve
Psion 8-bit A-law.  Used on older Psion PDAs.
.TP
.B .xa
Maxis XA files.
These are 16-bit ADPCM audio files used by Maxis games.  Writing .xa files is
currently not supported, although adding write support should not be very
difficult.
.TP
.B .raw
Raw (headerless) audio files.  The sample rate, sample size, and data
encoding must be given using command-line format options; the number of
channels defaults to 1.
.TP
.B .ub .sb .uw .sw .ul .al .lu .la .sl
These filename extensions serve as shorthand for identifying the format
of headerless audio files.  Thus, \fBub\fR, \fBsb\fR, \fBuw\fR,
\fBsw\fR, \fBul\fR, \fBal\fR, \fBlu\fR, \fBla\fR and \fBsl\fR indicate a
file with a single audio channel, sample rate of 8000Hz, and samples
encoded as `unsigned byte', `signed byte', `unsigned word', `signed
word', `\(*m-law' (byte), `A-law' (byte), inverse bit order `\(*m-law',
inverse bit order `A-law', or `signed long' respectively.  Command-line
format options can also be given to modify the selected format if it
does not provide an exact match for a particular file.
.SP
Headerless audio files on a `Sparc' computer are likely to be of format
\fBul\fR;  on a `Mac' computer, they're likely to be \fBub\fR but with a
sample rate of 11025 or 22050 Hz.
.SH EFFECTS
Multiple effects may be applied to the audio by specifying them
one after another at the end of the command line.
.SP
.I Note:
Brackets [ ] are used to denote parameters that are optional, braces
{ } to denote those that are both optional and repeatable,
and angle brackets < > to denote those that are repeatable but not
optional.
.TP
\fBavg\fR [ \fB\-l\fR\^|\^\fB\-r\fR\^|\^\fB\-f\fR\^|\^\fB\-b\fR\^|\^\fB\-1\fR\^|\^\fB\-2\fR\^|\^\fB\-3\fR\^|\^\fB\-4\fR\^|\^\fIn\fR{\fB,\fIn\fR} ]
Reduce the number of channels by averaging the samples,
or duplicate channels to increase the number of channels.
This effect is automatically used when the number of input
channels differ from the number of output channels.  When reducing
the number of channels it is possible to manually specify the
.B avg
effect and use the \fB\-l\fR, \fB\-r\fR, \fB\-f\fR, \fB\-b\fR,
\fB\-1\fR, \fB\-2\fR, \fB\-3\fR, \fB\-4\fR, options to select only
the left, right, front, back channel(s) or specific channel
for the output instead of averaging the channels.
The \fB\-l\fR, and \fB\-r\fR options will do averaging
in quad-channel files so select the exact channel to prevent this.
.SP
The
.B avg
effect can also be invoked with up to 16
numbers, separated by commas, which specify the proportion (0 = 0% and 1 = 100%)
of each input channel that is to be mixed into each output channel.
In two-channel mode, 4 numbers are given: l \*(RA l, l \*(RA r, r \*(RA l, and r \*(RA r,
respectively.
In four-channel mode, the first 4 numbers give the proportions for the
left-front output channel, as follows: lf \*(RA lf, rf \*(RA lf, lb \*(RA lf, and
rb \*(RA rf.
The next 4 give the right-front output in the same order, then
left-back and right-back.
.SP
It is also possible to use the 16 numbers to expand or reduce the
channel count; just specify 0 for unused channels.
.SP
Finally, certain reduced combination of numbers can be specified
for certain input/output channel combinations.
.TS
center box ;
cB cB cB lB
c c c l .
In Ch	Out Ch	Num	Mappings
2	1	2	l \*(RA l, r \*(RA l
2	2	1	adjust balance
4	1	4	lf \*(RA l, rf \*(RA l, lb \*(RA l, rb \*(RA l
4	2	2	lf \*(RA l&rf \*(RA r, lb \*(RA l&rb \*(RA r
4	4	1	adjust balance
4	4	2	front balance, back balance
.TE
.SP
.TP
\fBband\fR [\fB\-n\fR] \fIcenter\fR [\fIwidth\fR]
Apply a band-pass filter.
The frequency response drops logarithmically
around the
.I center
frequency.
The
.I width
gives the slope of the drop.
The frequencies at
.I center
+
.I width
and
.I center
\-
.I width
will be half of their original amplitudes.
.B band
defaults to a mode oriented to pitched audio,
i.e. voice, singing, or instrumental music.
The \fB\-n\fR (for noise) option uses the alternate mode
for un-pitched audio (e.g. percussion).
.B Warning:
\fB\-n\fR introduces a power-gain of about 11dB in the filter, so beware
of output clipping.
.B band
introduces noise in the shape of the filter,
i.e. peaking at the
.I center
frequency and settling around it.
.SP
This effect supports the \fB\-\-octave\fR global option (see above).
.SP
See also \fBfilter\fR for a bandpass filter with steeper shoulders.
.TP
\fBbandpass\fR\^|\^\fBbandreject \fIfrequency bandwidth\fR
Apply a two-pole Butterworth band-pass or band-reject filter with
central frequency (in Hz) \fIfrequency\fR,
and bandwidth (in Hz, and as determined by the 3dB points)
\fIbandwidth\fR.
The filter rolls off at 6dB per octave (20dB per decade).
.SP
These effects support the \fB\-\-octave\fR global option (see above).
.TP
\fBbandreject \fIfrequency bandwidth\fR
Apply a band-reject filter.
See the description of the \fBbandpass\fR effect for details.
.TP
\fBbass\fR\^|\^\fBtreble \fIgain\fR [\fIfrequency\fR] [\fIslope\fR]
Boost or cut the bass (lower) or treble (upper) frequencies of the audio
using a two-pole shelving filter with a response similar to that
of a standard hi-fi's (Baxandall) tone-controls.  This is also
known as shelving equalisation (EQ).
.SP
\fIgain\fR gives the dB gain at 0Hz (for \fBbass\fR), or whichever is
the lower of \(ap22kHz and the Nyquist frequency (for \fBtreble\fR).  Its
useful range is about \-20 (for a large cut) to +20 (for a large
boost).
Beware of
.B Clipping
when using a positive \fIgain\fR.
.SP
If desired, the filter can be fine-tuned using the following
optional parameters (in either order):
.SP
\fIfrequency\fR sets the filter's center frequency and so can be
used to extend or reduce the frequency range to be boosted or
cut.  The default value is 100Hz (for \fBbass\fR) or 3kHz (for
\fBtreble\fR).
.SP
\fIslope\fR is a number between 0 and 1 that determines how
steep the filter's shelf transition is.  Its useful range is
about 0\*d3 (for a gentle slope) to 1 (for a steep slope).  The
default value is 0\*d5.
.SP
These effects support the \fB\-\-octave\fR global option (see above).
.SP
See also \fBequalizer\fR for a peaking equalisation effect.
.TP
\fBchorus \fIgain-in gain-out\fR <\fIdelay decay speed depth \fB\-s\fR\^|\^\fB\-t\fR>
Add a chorus effect to the audio.  Each four-tuple
delay/decay/speed/depth gives the delay in milliseconds
and the decay (relative to gain-in) with a modulation
speed in Hz using depth in milliseconds.
The modulation is either sinusoidal (\fB\-s\fR) or triangular
(\fB\-t\fR).  Gain-out is the volume of the output.
.TP
\fBcompand \fIattack1\fB,\fIdecay1\fR{\fB,\fIattack2\fB,\fIdecay2\fR}
\fIin-dB1\fB,\fIout-dB1\fR{\fB,\fIin-dB2\fB,\fIout-dB2\fR}
.br
[\fIgain\fR [\fIinitial-volume\fR [\fIdelay\fR] ] ]
.SP
Compand (compress or expand) the dynamic range of the audio.  The
attack and decay time specify the integration time over which the
absolute value of the input signal is integrated to determine its
volume; attacks refer to increases in volume and decays refer to
decreases.  Where more than one pair of attack/decay parameters are
specified, each channel is treated separately and the number of pairs
must agree with the number of input channels.  The second parameter is
a list of points on the compander's transfer function specified in dB
relative to the maximum possible signal amplitude.  The input values
must be in a strictly increasing order but the transfer function does
not have to be monotonically rising.  The special value \fB\-inf\fR may
be used to indicate that the input volume should be associated output
volume.  The points \fB\-inf,\-inf\fR and \fB0,0\fR are assumed; the
latter may be overridden, but the former may not.
.SP
The third
(optional) parameter is a post-processing gain in dB which is applied
after the compression has taken place; the fourth (optional) parameter
is an initial volume to be assumed for each channel when the effect
starts.  This permits the user to supply a nominal level initially, so
that, for example, a very large gain is not applied to initial signal
levels before the companding action has begun to operate: it is quite
probable that in such an event, the output would be severely clipped
while the compander gain properly adjusts itself.
.SP
The fifth (optional) parameter is a delay in seconds.
The input signal is analysed immediately to control the compander, but
it is delayed before being fed to the volume adjuster.
Specifying a delay approximately equal to the attack/decay times
allows the compander to effectively operate in a `predictive' rather than a
reactive mode.
.SP
See also
.B mcompand
for a multiple-band companding effect.
.TP
\fBdcshift \fIshift\fR [\fIlimitergain\fR]
DC Shift the audio, with basic linear amplitude formula.
This is most useful if your audio tends to not be centered around
a value of 0.  Shifting it back will allow you to get the most volume
adjustments without clipping.
.SP
The first option is the \fIdcshift\fR value.  It is a floating point number that
indicates the amount to shift.
.SP
An optional
.I limitergain
can be specified as well.  It should have a value much less than 1
(e.g. 0\*d05 or 0\*d02) and is used only on peaks to prevent clipping.
.TP
\fBdeemph\fR
Apply a treble attenuation shelving filter to audio in
audio-CD format.  The frequency response of pre-emphasized
recordings is rectified.  The filtering is defined in the
standard document ISO 908.
.SP
This effect supports the \fB\-\-octave\fR global option (see above).
.SP
.TP
\fBdither\fR [\fIdepth\fR]
Apply dithering to the audio.
Dithering deliberately adds digital white noise to the signal
in order to mask audible quantization effects that
can occur if the output sample size is less than 24 bits.
By default, the amount of noise added is \(12 bit;
the optional \fIdepth\fR parameter is a (linear or voltage)
multiplier of this amount.
.SP
This effect should not be followed by any other effect that
affects the audio.
.TP
\fBearwax\fR
Makes audio easier to listen to on headphones.
Adds `cues' to audio in audio-CD format so that
when listened to on headphones the stereo image is
moved from inside
your head (standard for headphones) to outside and in front of the
listener (standard for speakers).  See
http://www.geocities.com/beinges
for a full explanation.
.TP
\fBecho \fIgain-in gain-out\fR <\fIdelay decay\fR>
Add echoing to the audio.
Each
.I "delay decay"
pair gives the delay in milliseconds
and the decay (relative to gain-in) of that echo.
Gain-out is the volume of the output.
.TP
\fBechos \fIgain-in gain-out\fR <\fIdelay decay\fR>
Add a sequence of echos to the audio.
Each
.I "delay decay"
pair gives the delay in milliseconds
and the decay (relative to gain-in) of that echo.
Gain-out is the volume of the output.
.TP
\fBequalizer \fIfrequency Q gain\fR
Apply a two-pole peaking equalisation (EQ) filter.
With this filter, the signal-level at and around a selected frequency
can be increased or decreased, whilst (unlike band-pass and band-reject
filters) that at all other frequencies is unchanged.
.SP
\fIfrequency\fR gives the filter's central frequency in Hz, \fIQ\fR its
band-width specified as a `Q-factor' (see
http://en.wikipedia.org/wiki/Q_factor), and \fIgain\fR the required gain
or attenuation in dB.
Beware of
.B Clipping
when using a positive \fIgain\fR.
.SP
In order to produce complex equalisation curves, this effect
can be given several times, each with a different central frequency.
.SP
This effect supports the \fB\-\-octave\fR global option (see above).
.SP
See also \fBbass\fR and \fBtreble\fR for shelving equalisation effects.
.TP
\fBfade\fR [\fItype\fR] \fIfade-in-length\fR [\fIstop-time\fR [\fIfade-out-length\fR] ]
Add a fade effect to the beginning, end, or both of the audio.
.SP
For fade-ins, this starts from the first sample and ramps the volume of the audio from 0 to full volume over \fIfade-in-length\fR seconds.  Specify 0 seconds if no fade-in is wanted.
.SP
For fade-outs, the audio will be truncated at
.I stop-time
and
the volume will be ramped from full volume down to 0 starting at
\fIfade-out-length\fR seconds before the \fIstop-time\fR.  If
.I fade-out-length
is not specified, it defaults to the same value as
\fIfade-in-length\fR.
No fade-out is performed if
.I stop-time
is not specified.
.SP
All times can be specified in either periods of time or sample counts.
To specify time periods use the format hh:mm:ss.frac format.  To specify
using sample counts, specify the number of samples and append the letter `s'
to the sample count (for example `8000s').
.SP
An optional \fItype\fR can be specified to change the type of envelope.  Choices are \fBq\fR for quarter of a sine wave, \fBh\fR for half a sine wave, \fBt\fR for linear slope, \fBl\fR for logarithmic, and \fBp\fR for inverted parabola.  The default is a linear slope.
.TP
\fBfilter\fR [\fIlow\fR]\fB\-\fR[\fIhigh\fR] [\fIwindow-len\fR [\fIbeta\fR] ]
Apply a sinc-windowed lowpass, highpass, or bandpass filter of given
window length to the signal.
\fIlow\fR refers to the frequency of the lower 6dB corner of the filter.
\fIhigh\fR refers to the frequency of the upper 6dB corner of the filter.
.SP
A low-pass filter is obtained by leaving \fIlow\fR unspecified, or 0.
A high-pass filter is obtained by leaving \fIhigh\fR unspecified, or 0,
or greater than or equal to the Nyquist frequency.
.SP
The \fIwindow-len\fR, if unspecified, defaults to 128.
Longer windows give a sharper cutoff, smaller windows a more gradual cutoff.
.SP
The \fIbeta\fR, if unspecified, defaults to 16.  This selects a Kaiser window.
You can select a Nuttall window by specifying anything \(<= 2 here.
For more discussion of beta, look under the \fBresample\fR effect.
.SP
.TP
\fBflanger\fR [\fIdelay depth regen width speed shape phase interp\fR]
Apply a flanging effect to the audio.
All parameters are optional (right to left).
.TS
center box;
cB cB cB lB
cI c c l.
\ 	Range	Default	Description
delay	0 \- 10	0	Base delay in milliseconds.
depth	0 \- 10	2	Added swept delay in milliseconds.
regen	\-95 \- 95	0	T{
.na
Percentage regeneration (delayed signal feedback).
T}
width	0 \- 100	71	T{
.na
Percentage of delayed signal mixed with original.
T}
speed	0\*d1 \- 10	0\*d5	Sweeps per second (Hz).
shape	\ 	sin	Swept wave shape: \fBsine\fR\^|\^\fBtriangle\fR.
phase	0 \- 100	25	T{
.na
Swept wave percentage phase-shift for multi-channel (e.g. stereo) flange;
0 = 100 = same phase on each channel.
T}
interp	\ 	lin	T{
.na
Digital delay-line interpolation: \fBlinear\fR\^|\^\fBquadratic\fR.
T}
.TE
.SP
.TP
\fBhighp\fR \fIfrequency\fR
Apply a high-pass filter.
This effect is just an alias for the
.B highpass
effect used with its
.B -1
option; it is retained for backwards compatibilty only.
.TP
\fBhighpass\fR\^|\^\fBlowpass\fR [\fB-1\fR|\fB-2\fR] \fIfrequency\fR [\fIQ\fR]
Apply a high-pass or low-pass filter with 3dB point \fIfrequency\fR.
The filter can be either single-pole (with
.BR -1 ),
or double-pole (with
.B -2
or if unspecified).
.I Q
applies only to double-pole filters; its default value is 0\*d707 and gives
a Butterworth response.  The single-pole and double-pole filters roll off at
6 and 12 dB per octave (20 and 40 dB per decade) respectively.  See
http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt for a detailed
discussion of the double-pole filters.
.SP
These effects support the \fB\-\-octave\fR global option (see above).
.SP
See also \fBfilter\fR for filters with a sharper cutoff.
.TP
\fBlowp \fIfrequency\fR
Apply a low-pass filter.
This effect is just an alias for the
.B lowpass
effect used with its
.B -1
option; it is retained for backwards compatibilty only.
.TP
\fBlowpass \fIfrequency\fR
Apply a low-pass filter.
See the description of the \fBhighpass\fR effect for details.
.TP
\fBlua\fR \fIlua-script\fR [\fIoption...\fR]
This effect allows effects to be implemented in Lua. See
.BR soxlua (7)
for details.
.TP
\fBmask\fR [\fIdepth\fR]
This effect is just a deprecated alias for the \fBdither\fR effect, left for historical reasons.
.TP
\fBmcompand "\fIattack1\fB,\fIdecay1\fR{\fB,\fIattack2\fB,\fIdecay2\fR}
\fIin-dB1\fB,\fIout-dB1\fR{\fB,\fIin-dB2\fB,\fIout-dB2\fR}
.br
[\fIgain\fR [\fIinitial-volume\fR [\fIdelay\fR] ] ]\fB" \fIxover-freq\fR
.SP
Multi-band compander is similar to the single band compander but the
audio is first divided up into bands and then the compander is run on
each band. See the \fBcompand\fR effect for the definition of its
options. Compand options are specified between double quotes and the
crossover frequency for that band is specified separately with
\fIxover-fre\fR. This can be repeated multiple times to create
multiple bands.
.TP
\fBnoiseprof\fR [\fIprofile-file\fR]
Calculate a profile of the audio for use in noise reduction.
See the description of the \fBnoisered\fR effect for details.
.TP
\fBnoisered \fIprofile-file\fR [\fIthreshold\fR]
Noise reduction filter with profiling.  This filter is moderately effective at
removing consistent background noise such as hiss or hum.  To use it, first run
the \fBnoiseprof\fR effect on a section of audio that ideally would
contain silence but in fact contains noise.
The \fBnoiseprof\fR effect will write out a noise profile
to \fIprofile-file\fR, or to stdout if no \fIprofile-file\fR is specified.
If there is audio output on stdout then the profile will instead be directed to
stderr.
.SP
To actually remove the noise, run
SoX again with the \fInoisered\fR filter.  The
filter needs one parameter, \fIprofile-file\fR, which contains the noise profile
from \fBnoiseprof\fR.  \fIthreshold\fR specifies how much noise should be removed, and
may be between 0 and 1 with a default of 0\*d5.  Higher values will remove more
noise but present a greater likelyhood of distorting the desired audio signal.
Experiment with different threshold values to find the optimal one for your
audio.
.TP
\fBpad\fR { \fIlength\fR[\fB@\fIposition\fR] }
Pad the audio with silence, at the beginning, the end, or any
specified points through the audio.
Both
.I length
and
.I position
can specify a time or, if appended with an `s', a number of samples.
.I length
is the amount of silence to insert and
.I position
the position in the input audio stream at which to insert it.
Any number of lengths and positions may be specified, provided that
a specified position is not less that the previous one.
.I position
is optional for the first and last lengths specified and
if omitted correspond to the beginning and the end of the audio respectively.
For example:
.B pad 1\*d5 1\*d5
adds 1\*d5 seconds of silence padding at each end of the audio, whilst
.B pad 4000s@3:00
inserts 4000 samples of silence 3 minutes into the audio.
If silence is wanted only at the end of the audio, specify either the end
position or specify a zero-length pad at the start.
.TP
\fBpan \fIdirection\fR
Pan the audio from one channel to another.  This is done by
changing the volume of the input channels so that it fades out on one
channel and fades-in on another.  If the number of input channels is
different then the number of output channels then this effect tries to
intelligently handle this.  For instance, if the input contains 1 channel
and the output contains 2 channels, then it will create the missing channel
itself.  The
.I direction
is a value from \-1 to 1.  \-1 represents
far left and 1 represents far right.  Numbers in between will start the
pan effect without totally muting the opposite channel.
.TP
\fBphaser \fIgain-in gain-out delay decay speed\fR [\fB\-s\fR\^|\^\fB\-t\fR]
Add a phasing effect to the audio.  
delay/decay/speed gives the delay in milliseconds
and the decay (relative to gain-in) with a modulation
speed in Hz.
The modulation is either sinusoidal (\fB\-s\fR) or triangular
(\fB\-t\fR).  The decay should be less than 0\*d5 to avoid
feedback.  Gain-out is the volume of the output.
.TP
\fBpick\fR [ \fB\-l\fR\^|\^\fB\-r\fR\^|\^\fB\-f\fR\^|\^\fB\-b\fR\^|\^\fB\-1\fR\^|\^\fB\-2\fR\^|\^\fB\-3\fR\^|\^\fB\-4\fR\^|\^\fIn\fR{\fB,\fIn\fR} ]
Pick a subset of channels to be copied into the output file.  This effect is just an alias of the
.B avg
effect and is retained for backwards compatibility only.
.TP
\fBpitch \fIshift\fR [\fIwidth interpolate fade\fR]
Change the pitch of file without affecting its duration by cross-fading
shifted samples.
.I shift
is given in cents.  Use a positive value to shift to treble, negative value to shift to bass.
Default shift is 0.
.I width
of window is in ms.  Default width is 20ms.  Try 30ms to lower pitch,
and 10ms to raise pitch.
.I interpolate
option, can be \fBcubic\fR or \fBlinear\fR.  Default is \fBcubic\fR.  The
.I fade
option, can be \fBcos\fR, \fBhamming\fR, \fBlinear\fR or
\fBtrapezoid\fR; the default is \fBcos\fR.
.TP
\fBpolyphase\fR [\fB\-w nut\fR\^|\^\fBham\fR] [\fB\-width long\fR\^|\^\fBshort\fR\^|\^\fIn\fR] [\fB\-cutoff \fIc\fR]
Change the sampling rate using `polyphase interpolation', a DSP algorithm.
This method is relatively slow and memory intensive.
.SP
If the \fB\-w\fR parameter is \fBnut\fR, then a Nuttall (~90 dB
stop-band) window will be used; \fBham\fR selects a Hamming (~43
dB stop-band) window.  The default is Nutall.
.SP
The \fB\-width\fR parameter specifies the (approximate) width of the filter. The default is 1024 samples, which produces reasonable results.
.SP
The \fB\-cutoff\fR value (\fIc\fR) specifies the filter cutoff frequency in terms of fraction of
frequency bandwidth, also know as the Nyquist frequency.  See
the \fBresample\fR effect for
further information on Nyquist frequency.  If up-sampling, then this is the
fraction of the original signal
that should go through.  If down-sampling, this is the fraction of the
signal left after down-sampling.  The default is 0\*d95.
.SP
See also
.B rabbit
and
.B resample
for other sample-rate changing effects.
.TP
\fBrabbit\fR [\fB\-c0\fR\^|\^\fB\-c1\fR\^|\^\fB\-c2\fR\^|\^\fB\-c3\fR\^|\^\fB\-c4\fR]
Change the sampling rate using `libsamplerate', also known as `Secret Rabbit
Code'.  This effect is
optional and must have been selected at compile time of SoX.  See
http://www.mega-nerd.com/SRC for details of the algorithms.  Algorithms
0 through 2 are progressively faster and lower quality versions of the
sinc algorithm; the default is \fB\-c0\fR, which is probably the best
quality algorithm for general use currently available in SoX.
Algorithm 3 is zero-order hold, and 4 is linear interpolation.
.SP
See also
.B polyphase
and
.B resample
for other sample-rate changing effects, and see
\fBresample\fR for more discussion of resampling.
.TP
\fBrate\fR
Does the same as \fBresample\fR with no parameters; it exists for
backwards compatibility.
.TP
\fBrepeat \fIcount\fR
Repeat the entire audio \fIcount\fR times.
Requires disk space to store the data to be repeated.
Note that repeating once yields two copies: the orignal audio and the
repeated audio.
.TP
\fBresample\fR [\fB\-qs\fR\^|\^\fB\-q\fR\^|\^\fB\-ql\fR] [\fIrolloff\fR [\fIbeta\fR] ]
Change the sampling rate using simulated
analog filtration.  Other rate changing effects available are
\fBpolyphase\fR and \fBrabbit\fR.  There is a detailed analysis of
\fBresample\fR and \fBpolyphase\fR at
http://leute.server.de/wilde/resample.html; see \fBrabbit\fR for a
pointer to its own documentation.
.SP
By default, linear interpolation is used,
with a window width about 45 samples at the lower of the two rates.
This gives an accuracy of about 16 bits, but insufficient stop-band rejection
in the case that you want to have roll-off greater than about 0\*d8 of
the Nyquist frequency.
.SP
The \fB\-q*\fR options will change the default values for roll-off and beta
as well as use quadratic interpolation of filter
coefficients, resulting in about 24 bits precision.
The \fB\-qs\fR, \fB\-q\fR, or \fB\-ql\fR options specify increased accuracy
at the cost of lower execution speed.  It is optional to specify
roll-off and beta parameters when using the \fB\-q*\fR options.
.SP
Following is a table of the reasonable defaults which are built-in to
SoX:
.SP
.TS
center box;
cB cB cB cB cB
c c n c c
cB c n c c.
Option	Window	Roll-off	Beta	Interpolation
(none)	45	0\*d80	16	linear
\-qs	45	0\*d80	16	quadratic
\-q	75	0\*d875	16	quadratic
\-ql	149	0\*d94	16	quadratic
.TE
.SP
\fB\-qs\fR, \fB\-q\fR, or \fB\-ql\fR use window lengths of 45, 75, or 149
samples, respectively, at the lower sample-rate of the two files.
This means progressively sharper stop-band rejection, at proportionally
slower execution times.
.SP
\fIrolloff\fR refers to the cut-off frequency of the
low pass filter and is given in terms of the
Nyquist frequency for the lower sample rate.  rolloff therefore should
be something between 0 and 1, in practise 0\*d8\-0\*d95.  The defaults are
indicated above.
.SP
The \fINyquist frequency\fR is equal to half the sample rate.  Logically,
this is because the A/D converter needs at least 2 samples to detect 1
cycle at the Nyquist frequency.  Frequencies higher then the Nyquist
will actually appear as lower frequencies to the A/D converter and
is called aliasing.  Normally, A/D converts run the signal through
a lowpass filter first to avoid these problems.
.SP
Similar problems will happen in software when reducing the sample rate of
an audio file (frequencies above the new Nyquist frequency can be aliased
to lower frequencies).  Therefore, a good resample effect
will remove all frequency information above the new Nyquist frequency.
.SP
The \fIrolloff\fR refers to how close to the Nyquist frequency this cutoff
is, with closer being better.  When increasing the sample rate of an
audio file you would not expect to have any frequencies exist that are
past the original Nyquist frequency.  Because of resampling properties, it
is common to have aliasing artifacts created above the old
Nyquist frequency.  In that case the \fIrolloff\fR refers to how close
to the original Nyquist frequency to use a highpass filter to remove
these artifacts, with closer also being better.
.SP
The \fIbeta\fR parameter
determines the type of filter window used.  Any value greater than 2 is
the beta for a Kaiser window.  Beta \(<= 2 selects a Nuttall window.
If unspecified, the default is a Kaiser window with beta 16.
.SP
In the case of Kaiser window (beta > 2), lower betas produce a somewhat
faster transition from pass-band to stop-band, at the cost of noticeable artifacts.
A beta of 16 is the default, beta less than 10 is not recommended.  If you want
a sharper cutoff, don't use low beta's, use a longer sample window.
A Nuttall window is selected by specifying any `beta' \(<= 2, and the
Nuttall window has somewhat steeper cutoff than the default Kaiser window.
You will probably not need to use the beta parameter at all, unless you are
just curious about comparing the effects of Nuttall vs. Kaiser windows.
.SP
This is the default effect if the two files have different sampling rates.
Default parameters are, as indicated above, Kaiser window of length 45,
roll-off 0\*d80, beta 16, linear interpolation.
.SP
Note: \fB\-qs\fR is only slightly slower, but more accurate for
16-bit or higher precision.
.SP
Note: In many cases of up-sampling, no interpolation is needed,
as exact filter coefficients can be computed in a reasonable amount of space.
To be precise, this is done when
.SP
.ce 3
input-rate < output-rate
and
output-rate \(di gcd(input-rate, output-rate) \(<= 511
.TP
\fBreverb \fIgain-out reverb-time\fR <\fIdelay\fR>
Add reverberation to the audio.  Each
.I delay
is given
in milliseconds and its feedback is depending on the
.I reverb-time
in milliseconds.  Each
.I delay
should be in
the range of half to quarter of
.I reverb-time
to get a realistic reverberation.
.I gain-out
is the volume of the output.
.TP
\fBreverse\fR
Reverse the audio completely.
Requires disk space to store the data to be reversed.
.TP
\fBsilence \fIabove-periods\fR [\fIduration threshold\fR[\fBd\fR\^|\^\fB%\fR] [\fIbelow-periods duration threshold\fR[\fBd\fR\^|\^\fB%\fR] ]
.SP
Removes silence from the beginning, middle, or end of the audio.  Silence is anything below a specified threshold.
.SP
The \fIabove-periods\fR value is used to indicate if audio should be trimmed at
the beginning of the audio.  A value of zero indicates no silence
should be trimmed from the beginning.  When specifying an non-zero
\fIabove-periods\fR, it trims audio up until it finds non-silence.
Normally, when trimming silence from
beginning of audio the \fIabove-periods\fR will be 1 but it can be increased to
higher values to trim all audio up to a specific count of non-silence periods.
For example, if you had an audio file with two songs that each contained
2 seconds of silence before the song, you could specify an \fIabove-period\fR
of 2 to strip out both silence periods and the first song.
.SP
When \fIabove-periods\fR is non-zero, you must also specify a \fIduration\fR and
\fIthreshold\fR.  \fIDuration\fR indications the amount of time that non-silence must be
detected before it stops trimming audio.  By increasing the duration, burst of noise can be treated as silence and trimmed off.
.SP
\fIThreshold\fR is used to indicate what sample value you should treat as
silence.  For digital audio, a value of 0 may be fine but for audio
recorded from analog, you may wish to increase the value to account
for background noise.
.SP
When optionally trimming silence from the end of the audio, you specify
a \fIbelow-periods\fR count.  In this case, \fIbelow-period\fR means
to remove all audio after silence is detected.
Normally, this will be a value 1 of but it can
be increased to skip over periods of silence that are wanted.  For example,
if you have a song with 2 seconds of silence in the middle and 2 second
at the end, you could set below-period to a value of 2 to skip over the
silence in the middle of the audio.
.SP
For \fIbelow-periods\fR, \fIduration\fR specifies a period of silence
that must exist before audio is not copied any more.  By specifying
a higher duration, silence that is wanted can be left in the audio.
For example, if you have a song with an expected 1 second of silence
in the middle and 2 seconds of silence at the end, a duration of 2
seconds could be used to skip over the middle silence.
.SP
Unfortunately, you must know the length of the silence at the
end of your audio file to trim off silence reliably.  A work around is
to use the \fBsilence\fR effect in combination with the \fBreverse\fR effect.
By first reversing the audio, you can use the \fIabove-periods\fR
to reliably trim all audio from what looks like the front of the file.
Then reverse the file again to get back to normal.
.SP
To remove silence from the middle of a file, specify a
\fIbelow-periods\fR that is negative.  This value is then
treated as a positive value and is also used to indicate the
effect should restart processing as specified by the
\fIabove-periods\fR, making it suitable for removing periods of
silence in the middle of the audio.
.SP
The \fIperiod\fR counts are in units of samples.  \fIDuration\fR counts may be in the format of hh:mm:ss.frac, or the exact count of samples.  \fIThreshold\fR numbers may be suffixed with
.B d
to indicate the value is in decibels, or
.B %
to indicate a percentage of maximum value of the sample value (\fB0%\fR specifies pure digital silence).
.TP
\fBspeed \fIfactor\fR[\fBc\fR]
Adjust the audio speed (pitch and tempo together).  \fIfactor\fR
is either the ratio of the new speed to the old speed: greater
than 1 speeds up, less than 1 slows down, or, if appended with the
letter
`c', the number of cents (i.e. 100ths of a semitone) by
which the pitch (and tempo) should be adjusted: greater than 0
increases, less than 0 decreases.
.SP
By default, the speed change is performed by the \fBresample\fR
effect with its default parameters.  For higher quality
resampling, in addition to the \fBspeed\fR effect, specify
either the \fBresample\fR or the \fBrabbit\fR effect with
appropriate parameters.
.TP
\fBstat\fR [\fB\-s \fIn\fR] [\fB\-rms\fR] [\fB\-freq\fR] [\fB\-v\fR] [\fB\-d\fR]
Do a statistical check on the input file,
and print results on the standard error file.  Audio is passed
unmodified through the SoX processing chain.
.SP
The `Volume Adjustment:' field in the statistics
gives you the parameter to the
.B \-v
.I number
which will make the audio as loud as possible without clipping.
Note: See the discussion on
.B Clipping
above for reasons why it is rarely a good idea to actually do this.
.SP
The option
.B \-v
will print out the `Volume Adjustment:' field's value only and
return.  This could be of use in scripts to auto convert the
volume.
.SP
The
.B \-s
option is used to scale the input data by a given factor.  The default value
of
.I n
is the max value of a signed long variable (0x7fffffff).  Internal effects
always work with signed long PCM data and so the value should relate to this
fact.
.SP
The
.B \-rms
option will convert all output average values to `root mean square'
format.
.SP
The
.B \-freq
option calculates the input's power spectrum and prints it to standard error.
.SP
There is also an optional parameter
.B \-d
that will print out a hex dump of the
audio from the internal buffer that is in 32-bit signed PCM data.
This is mainly only of use in tracking down endian problems that
creep in to SoX on cross-platform versions.
.TP
\fBstretch \fIfactor\fR [\fIwindow fade shift fading\fR]
Time stretch the audio by the given factor.  Changes duration without affecting the pitch.
.I factor
of stretching: >1 lengthen, <1 shorten duration.
.I window
size is in ms.  Default is 20ms.  The
.I fade
option, can be `lin'.
.I shift
ratio, in [0 1].  Default depends on stretch factor. 1
to shorten, 0\*d8 to lengthen.  The
.I fading
ratio, in [0 0\*d5].  The amount of a fade's default depends on
.I factor
and \fIshift\fR.
.TP
\fBswap\fR [\fI1 2\fR | \fI1 2 3 4\fR]
Swap channels in multi-channel audio files.  Optionally, you may
specify the channel order you would like the output in.  This defaults
to output channel 2 and then 1 for stereo and 2, 1, 4, 3 for quad-channels.
An interesting
feature is that you may duplicate a given channel by overwriting another.
This is done by repeating an output channel on the command-line.  For example,
.B swap 2 2
will overwrite channel 1 with channel 2; creating a stereo
file with both channels containing the same audio.
.TP
\fBsynth\fR [\fIlen\fR] {[\fItype\fR] [\fIcombine\fR] [\fIfreq\fR[\fI\-freq2\fR]] [\fIoff\fR] [\fIph\fR] [\fIp1\fR] [\fIp2\fR] [\fIp3\fR]}
This effect can be used to generate fixed or swept frequency audio tones
with various wave shapes, or to generate wide-band noise of various
`colours'.
Multiple synth effects can be cascaded to produce more complex
waveforms; at each stage it is possible to choose whether the generated
waveform will be mixed with, or modulated onto
the output from the previous stage.
Audio for each channel in a multi-channel audio file can be synthesised
independently.
.SP
Though this effect is used to generate audio, an input file must
still be given.  This can be used to set the synthesised audio
length, the number of channels, and the sampling rate, however since the
input file's audio is not needed, the null
file `\fB\-n\fR' is usually given instead (and the length specified
as a parameter to \fBsynth\fR or by another given effect that can has an
associated length).
.SP
For example, the following produces a 3 second, 44\*d1kHz,
stereo audio file containing a sine-wave swept from 300 to 3300Hz.
.SP
	sox \-n output.au synth 3 sine 300\-3300
.SP
This produces an 8kHz mono version:
.SP
	sox \-r 8000 \-c 1 \-n output.au synth 3 sine 300\-3300
.SP
Multiple channels can be synthesised by specifying the set of
parameters shown between braces multiple times;
the following puts the swept tone in the left channel and adds `brown'
noise in the right:
.SP
	sox \-n output.au synth 3 sine 300\-3300 brownnoise
.SP
The following example shows how two synth effects can be cascaded
to create a more complex waveform:
.SP
	sox \-n output.au synth 0\*d5 sine 200\-500 synth 0\*d5 sine fmod 700\-100
.SP
Frequencies can also be given as a number of musical semitones relative
to `middle A' (440Hz) by prefixing a `%' character;  for example, the
following could be used to help tune a guitar's `E' strings:
.SP
	play \-n synth sine %\-17
.SP
.B N.B.
This effect generates audio at maximum volume, which means that there
is a high chance of clipping when using the audio subsequently, so
in most cases, you will want to follow this effect with the \fBvol\fR
effect to prevent this from happening. (See also
.B Clipping
above.)
.SP
A detailed description of each
.B synth
parameter follows:
.SP
\fIlen\fR is the length of audio to synthesise expressed as a time
or as a number of samples;
0=inputlength, default=0.
.SP
The format for specifying lengths in time is hh:mm:ss.frac.  The format
for specifying sample counts is the number of samples with the letter
`s' appended to it.
.SP
\fItype\fR is one of sine, square, triangle, sawtooth, trapezium, exp,
[white]noise, pinknoise, brownnoise; default=sine
.SP
\fIcombine\fR is one of create, mix, amod (amplitude modulation), fmod
(frequency modulation); default=create
.SP
\fIfreq\fR/\fIfreq2\fR are the frequencies at the beginning/end of
synthesis in Hz or, if preceded with `%', semitones relative to A
(440Hz); for both, default=%0.  If
.I freq2
is given, then
.I len
must also have been given.
Not used for noise.
.SP
\fIoff\fR is the bias (DC-offset) of the signal in percent; default=0.
.SP
\fIph\fR is the phase shift in percentage of 1 cycle; default=0.  Not
used for noise.
.SP
\fIp1\fR is the percentage of each cycle that is `on' (square), or
`rising' (triangle, exp, trapezium); default=50 (square, triangle, exp),
default=10 (trapezium).
.SP
\fIp2\fR (trapezium): the percentage through each cycle at which `falling'
begins; default=50. exp: the amplitude in percent; default=100.
.SP
\fIp3\fR (trapezium): the percentage through each cycle at which `falling'
ends; default=60.
.TP
\fBtreble \fIgain\fR [\fIfrequency\fR] [\fIslope\fR]
Apply a treble tone-control effect.
See the description of the \fBbass\fR effect for details.
.TP
\fBtrim \fIstart\fR [\fIlength\fR]
Trim can trim off unwanted audio from the beginning and end of the
audio.  Audio is not sent to the output stream until
the \fIstart\fR location is reached.
.SP
The optional \fIlength\fR parameter tells the number of samples to output
after the \fIstart\fR sample and is used to trim off the back side of the
audio.  Using a value of 0 for the \fIstart\fR parameter will allow
trimming off the back side only.
.SP
Both options can be specified using either an amount of time or an
exact count of samples.  The format for specifying lengths in time is
hh:mm:ss.frac.  A start value of 1:30\*d5 will not start until 1 minute,
thirty and \(12 seconds into the audio.  The format for specifying
sample counts is the number of samples with the letter `s' appended to
it.  A value of 8000s will wait until 8000 samples are read before
starting to process audio.
.TP
\fBvibro \fIspeed\fR [\fIdepth\fR]
Apply low frequency sinusoidal amplitude modulation to the audio.
Otherwise known as `tremolo', in the guitar world
this effect is often referred to as `vibrato' (which in fact
varies pitch, not amplitude).
The modulation frequency in Hz is given by
.I speed
(0 to 30), and the modulation depth by
.I depth
(0 to 1, default 0\*d5).
.TP
\fBvol \fIgain\fR [\fItype\fR [\fIlimitergain\fR] ]
Apply an amplification or an attenuation to the audio signal.
Unlike the
.B \-v
option (which is used for balancing multiple input files as they enter the
SoX effects processing chain),
.B vol
is an effect like any other so can be applied anywhere, and several times
if necessary, during the processing chain.
.SP
The amount to change the volume is given by
.I gain
which is interpreted, according to the given \fItype\fR, as follows: if
.I type
is \fBamplitude\fR (or is omitted), then
.I gain
is an amplitude (i.e. voltage or linear) ratio,
if \fBpower\fR, then a power (i.e. wattage or voltage-squared) ratio,
and if \fBdB\fR, then a power change in dB.
.SP
When
.I type
is \fBamplitude\fR or \fBpower\fR, a
.I gain
of 1 leaves the volume unchanged,
less than 1 decreases it,
and greater than 1 increases it;
a negative
.I gain
inverts the audio signal in addition to adjusting its volume.
.SP
When
.I type
is \fBdB\fR, a
.I gain
of 0 leaves the volume unchanged,
less than 0 decreases it,
and greater than 0 increases it.
.SP
See http://en.wikipedia.org/wiki/Decibel
for a detailed discussion on electrical (and hence audio signal)
voltage and power ratios.
.SP
Beware of
.B Clipping
when the increasing the volume.
.SP
An optional \fIlimitergain\fR value can be specified and should be a
value much less
than 1 (e.g. 0\*d05 or 0\*d02) and is used only on peaks to prevent clipping.
Not specifying this parameter will cause no limiter to be used.  In verbose
mode, this effect will display the percentage of the audio that needed to be
limited.
.SH DIAGNOSTICS
Exit status is 0 for no error, 1 if there is a problem with the
command-line parameters, or 2 if an error occurs during file processing.
.SH BUGS
Please report any bugs found in this version of SoX to the mailing list
(sox-users@lists.sourceforge.net).
.SH SEE ALSO
.BR soxexam (7),
.BR soxlua (7),
.BR libst (3)
.SP
The SoX web page at http://sox.sourceforge.net
.SH LICENSE
Copyright 1991 Lance Norskog and Sundry Contributors.
Copyright 1998\-2007 by Chris Bagwell and SoX Contributors.
.SP
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.
.SP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.SH AUTHORS
Chris Bagwell (cbagwell@users.sourceforge.net).
Other authors and contributors are listed in the AUTHORS file that
is distributed with the source code.
